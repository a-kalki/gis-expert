import { rm, mkdir, readdir, cp, stat } from 'node:fs/promises';
import { join, dirname, basename, relative } from 'node:path';

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const SRC_DIR = 'src';
const OUT_DIR = process.env.NODE_ENV === 'production' ? 'dist/prod' : 'dist/dev';

// --- –ú–æ–¥—É–ª–∏ —Å —è–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ---
const MODULES = {
  community: {
    entry: 'src/community/ui/community.html',
    assets: ['src/community/ui/**/*.{css,ts,js}'],
    dependencies: [] // –¢–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ—Ä–Ω—è
  },
  course: {
    entry: 'src/course/ui/course-landing.html',
    assets: [
      'src/course/ui/**/*.{css,ts,js,html}',
    ],
    dependencies: [] // –¢–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ—Ä–Ω—è
  }
};

// –û–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–±—É–¥—É—Ç –≤ –∫–æ—Ä–Ω–µ dist)
const SHARED_DEPENDENCIES = [
  'src/app/ui/common.css',
  'src/app/ui/tracker.ts',
  'src/app/ui/user-session-manager.ts',
  'src/app/ui/tab-manager.ts'
];

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ---
const args = process.argv.slice(2);
const isProd = args.includes('--prod');
const isDev = args.includes('--dev');

if (!isProd && !isDev) {
  console.error('–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∫–∏ (--dev –∏–ª–∏ --prod).');
  process.exit(1);
}

console.log(`–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–±–æ—Ä–∫–∞ –≤ —Ä–µ–∂–∏–º–µ: ${isProd ? 'Production' : 'Development'}`);
console.log(`–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${OUT_DIR}`);

// --- –§—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∫–∏ ---

async function cleanAndCreateDir() {
  console.log(`–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${OUT_DIR}`);
  await rm(OUT_DIR, { recursive: true, force: true });
  await mkdir(OUT_DIR, { recursive: true });
  console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞.');
}

async function copyFile(source: string, destination: string) {
  await mkdir(dirname(destination), { recursive: true });
  await cp(source, destination);
  console.log(`üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${source} ‚Üí ${destination}`);
}

async function findFiles(pattern: string): Promise<string[]> {
  const glob = new Bun.Glob(pattern);
  const files = [];
  for await (const file of glob.scan(".")) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    if (!file.endsWith('.test.ts') && !file.includes('.test.')) {
      files.push(file);
    }
  }
  return files;
}

async function buildSharedDependencies() {
  console.log('\n--- –°–±–æ—Ä–∫–∞ –æ–±—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---');
  const copiedFiles: string[] = [];

  // –°–æ–±–∏—Ä–∞–µ–º TypeScript –æ–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const notTsDeps = SHARED_DEPENDENCIES.filter(dep => !dep.endsWith('.ts'));
  for (const fileName of notTsDeps) {
    const name = basename(fileName);
    await copyFile(fileName, join(OUT_DIR, name));
  }

  // –°–æ–±–∏—Ä–∞–µ–º TypeScript –æ–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const tsDeps = SHARED_DEPENDENCIES.filter(dep => dep.endsWith('.ts'));
  if (tsDeps.length > 0) {
    console.log('–°–±–æ—Ä–∫–∞ –æ–±—â–∏—Ö TypeScript —Ñ–∞–π–ª–æ–≤...');
    
    // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º TS –≤ JS
    const result = await Bun.build({
      entrypoints: tsDeps,
      outdir: OUT_DIR,
      minify: isProd,
      sourcemap: isDev ? 'inline' : 'none',
      target: 'browser',
      format: 'esm',
      splitting: false,
    });

    if (result.success) {
      console.log('‚úÖ –û–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã');
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JS —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫
      for (const tsDep of tsDeps) {
        const baseName = basename(tsDep, '.ts');
        copiedFiles.push(`${baseName}.js`);
      }
      
      // –£–î–ê–õ–Ø–ï–ú –∏—Å—Ö–æ–¥–Ω—ã–µ .ts —Ñ–∞–π–ª—ã –∏–∑ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      for (const tsDep of tsDeps) {
        const name = basename(tsDep);
        const tsPath = join(OUT_DIR, name);
        try {
          await rm(tsPath);
          console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π TS —Ñ–∞–π–ª: ${name}`);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
      for (const message of result.logs) {
        console.error(message);
      }
      throw new Error('–°–±–æ—Ä–∫–∞ –æ–±—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏');
    }
  }

  return copiedFiles;
}

async function buildModule(moduleName: string, config: typeof MODULES[keyof typeof MODULES]) {
  console.log(`\n--- –°–±–æ—Ä–∫–∞ –º–æ–¥—É–ª—è: ${moduleName} ---`);
  const moduleOutDir = join(OUT_DIR, moduleName);
  await mkdir(moduleOutDir, { recursive: true });

  const copiedFiles: string[] = [];

  // 1. –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ HTML —Ñ–∞–π–ª—ã
  if (config.entry) {
    const htmlName = basename(config.entry);
    await copyFile(config.entry, join(moduleOutDir, htmlName));
    copiedFiles.push(htmlName);
    
    // –î–ª—è –∫—É—Ä—Å–æ–≤ –∫–æ–ø–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ HTML —Ñ–∞–π–ª—ã
    if (moduleName === 'course') {
      const additionalHtml = await findFiles('src/course/ui/*.html');
      for (const htmlFile of additionalHtml) {
        if (htmlFile !== config.entry) {
          const name = basename(htmlFile);
          await copyFile(htmlFile, join(moduleOutDir, name));
          copiedFiles.push(name);
        }
      }
    }
  }

  // 2. –ö–æ–ø–∏—Ä—É–µ–º –∞—Å—Å–µ—Ç—ã –º–æ–¥—É–ª—è
  for (const assetPattern of config.assets) {
    const assetFiles = await findFiles(assetPattern);
    for (const assetFile of assetFiles) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HTML —Ñ–∞–π–ª—ã
      if (assetFile.endsWith('.html')) continue;
      
      const relativePath = assetFile.replace(`src/${moduleName}/ui/`, '');
      const destPath = join(moduleOutDir, relativePath);
      await copyFile(assetFile, destPath);
      copiedFiles.push(relativePath);
    }
  }

  // 3. –°–æ–±–∏—Ä–∞–µ–º TypeScript/JavaScript —Ñ–∞–π–ª—ã (—Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–æ–¥—É–ª—è)
  const tsFiles = (await findFiles(`src/${moduleName}/ui/**/*.{ts,js}`))
    .filter(file => !file.endsWith('.test.ts') && !file.endsWith('.test.js'));

  const allEntryPoints = [...tsFiles];

  if (allEntryPoints.length > 0) {
    console.log(`[${moduleName}] –°–±–æ—Ä–∫–∞ TypeScript/JavaScript...`);
    
    try {
      const result = await Bun.build({
        entrypoints: allEntryPoints,
        outdir: moduleOutDir,
        minify: isProd,
        sourcemap: isDev ? 'inline' : 'none',
        target: 'browser',
        format: 'esm',
        splitting: false,
      });

      if (result.success) {
        console.log(`‚úÖ [${moduleName}] JavaScript/TypeScript —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã.`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JS —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫
        for (const entry of allEntryPoints) {
          const baseName = basename(entry, '.ts');
          copiedFiles.push(`${baseName}.js`);
        }
      } else {
        console.error(`‚ùå [${moduleName}] –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ JavaScript/TypeScript:`);
        for (const [index, message] of result.logs.entries()) {
          console.error(`\n--- –û—à–∏–±–∫–∞ ${index + 1} ---`);
          console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${message.message}`);
          if (message.position) {
            console.error(`–§–∞–π–ª: ${message.position?.file}`);
          }
        }
        throw new Error(`–°–±–æ—Ä–∫–∞ TypeScript –¥–ª—è –º–æ–¥—É–ª—è ${moduleName} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏`);
      }
    } catch (error: any) {
      console.error(`üí• [${moduleName}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ TypeScript:`);
      console.error(error.message);
      throw error;
    }
  } else {
    console.log(`[${moduleName}] TypeScript/JavaScript —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
  }

  return {
    moduleName,
    outDir: moduleOutDir,
    files: copiedFiles
  };
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ---
async function printDirectoryStructure(dir: string, prefix = ''): Promise<string[]> {
  try {
    const items = await readdir(dir);
    const lines: string[] = [];
    
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      const itemPath = join(dir, item);
      const stats = await stat(itemPath);
      const isLast = i === items.length - 1;
      
      const currentPrefix = prefix + (isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ');
      lines.push(currentPrefix + item);
      
      if (stats.isDirectory()) {
        const newPrefix = prefix + (isLast ? '    ' : '‚îÇ   ');
        const subLines = await printDirectoryStructure(itemPath, newPrefix);
        lines.push(...subLines);
      }
    }
    
    return lines;
  } catch (error) {
    return [`${prefix}‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${error}`];
  }
}

// --- –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∫–∏ ---
async function runBuild() {
  try {
    await cleanAndCreateDir();

    const buildResults = [];

    // 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const sharedFiles = await buildSharedDependencies();

    // 2. –ó–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
    for (const [moduleName, config] of Object.entries(MODULES)) {
      try {
        const result = await buildModule(moduleName, config);
        buildResults.push(result);
      } catch (error) {
        console.error(`\nüí• –°–±–æ—Ä–∫–∞ –º–æ–¥—É–ª—è ${moduleName} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π`);
        throw error;
      }
    }

    console.log('\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –í—ã–≤–æ–¥–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
    try {
      const structureLines = await printDirectoryStructure(OUT_DIR);
      structureLines.forEach(line => console.log(line));
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
    }

    // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏:');
    console.log(`   –û–±—â–∏–µ —Ñ–∞–π–ª—ã: ${sharedFiles.length} —Ñ–∞–π–ª–æ–≤`);
    for (const result of buildResults) {
      console.log(`   ${result.moduleName}: ${result.files.length} —Ñ–∞–π–ª–æ–≤`);
    }

  } catch (error: any) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∫–∏:');
    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    process.exit(1);
  }
}

runBuild();
