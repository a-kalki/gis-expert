import ChatSessionManager from './chat-session-manager.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–º–æ–¥–∑–∏-–∞–Ω–∏–º–∞—Ü–∏–π
const EMOJI_ANIMATIONS = {
    'thinking': [' o_o ', ' -_- ', ' ‚óî_‚óî ', ' ‚óï_‚óï '],
    'happy': [' ^_^ ', ' ‚ó°_‚ó° ', ' ‚âß‚ó°‚â¶ ', ' ‚òÖ_‚òÖ ', ' ‚ô•_‚ô• '],
    'clever': [' >_> ', ' ·ìö_·ó¢ ', ' ¬¨_¬¨ ', '   „Ç∑ ', ' ‚úå_‚úå '],
    'sad': [' T_T ', ' ‚Ä¢_‚Ä¢ ']
};

// –¢–∞–π–º–∏–Ω–≥–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (–º—Å)
const ANIMATION_CONFIG = {
    FRAME_DURATION: 600,
    INITIAL_DELAY: 1000
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isMobileDevice(): boolean {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
           window.innerWidth <= 768;
}

function smartFocusManagement(): void {
    const chatInput = document.getElementById('chat-input') as HTMLInputElement;
    if (!chatInput) return;
    
    if (!isMobileDevice()) {
        chatInput.focus();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –∫ –Ω–∏–∑—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function scrollToBottom(): void {
    const chatMessages = document.getElementById('chat-messages') as HTMLDivElement;
    if (!chatMessages) return;
    
    setTimeout(() => {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 10);
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —ç–º–æ–¥–∑–∏
function startEmojiAnimation(emojiElement: HTMLSpanElement, mood: keyof typeof EMOJI_ANIMATIONS): number {
    const frames = EMOJI_ANIMATIONS[mood];
    let currentFrame = 0;
    
    emojiElement.textContent = frames[currentFrame];
    
    return window.setInterval(() => {
        currentFrame = (currentFrame + 1) % frames.length;
        emojiElement.textContent = frames[currentFrame];
    }, ANIMATION_CONFIG.FRAME_DURATION);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–µ–π
function stopEmojiAnimation(messageElement: HTMLDivElement): void {
    const intervalId = (messageElement as any)._emojiInterval;
    if (intervalId) {
        clearInterval(intervalId);
        (messageElement as any)._emojiInterval = null;
    }
}

function removeEmojiIndicator(messageElement: HTMLDivElement): void {
    const emojiIndicator = (messageElement as any)._emojiIndicator;
    if (emojiIndicator && emojiIndicator.parentNode) {
        emojiIndicator.parentNode.removeChild(emojiIndicator);
    }
}

function appendMessage(text: string, sender: 'user' | 'assistant', isLoading = false): HTMLDivElement {
    const messageElement = document.createElement('div');
    messageElement.classList.add('message');

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const contentContainer = document.createElement('div');
    contentContainer.style.display = 'flex';
    contentContainer.style.alignItems = 'flex-start';
    contentContainer.style.gap = '10px';

    // –≠–º–æ–¥–∑–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
    let emojiIndicator: HTMLSpanElement | null = null;
    let emojiInterval: number | null = null;

    if (sender === 'assistant' && isLoading) {
        emojiIndicator = document.createElement('span');
        emojiIndicator.style.cssText = `
            font-size: 16px;
            min-width: 30px;
            height: 20px;
            display: inline-block;
            text-align: center;
        `;
        contentContainer.appendChild(emojiIndicator);
    }

    const p = document.createElement('p');
    p.textContent = text;
    p.style.margin = '0';
    p.style.flex = '1';
    
    contentContainer.appendChild(p);
    messageElement.appendChild(contentContainer);

    if (sender === 'user') {
        messageElement.classList.add('user-message');
    } else {
        messageElement.classList.add('assistant-message');
    }

    if (isLoading) {
        messageElement.classList.add('loading-indicator');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —ç–º–æ–¥–∑–∏
        if (emojiIndicator) {
            const intervalId = startEmojiAnimation(emojiIndicator, 'thinking');
            (messageElement as any)._emojiInterval = intervalId;
        }
    }

    const chatMessages = document.getElementById('chat-messages') as HTMLDivElement;
    if (chatMessages) {
        chatMessages.appendChild(messageElement);
        scrollToBottom();
    }
    
    (messageElement as any)._emojiIndicator = emojiIndicator;

    return messageElement;
}

function initializeChat() {
    const chatForm = document.getElementById('chat-form') as HTMLFormElement;
    const chatInput = document.getElementById('chat-input') as HTMLInputElement;
    const chatMessages = document.getElementById('chat-messages') as HTMLDivElement;

    if (!chatForm || !chatInput || !chatMessages) {
        console.log('Chat UI elements not found. Chat will not be initialized.');
        return;
    }

    // –û—á–∏—â–∞–µ–º —á–∞—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏)
    clearChatMessages();

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ª—é–±–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
    function updateActivity() {
        ChatSessionManager.updateLastActivity();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    function loadValidChatHistory(): void {
        const history = ChatSessionManager.getValidHistory();
        
        if (history.length > 0) {
            const recentHistory = history.slice(-10); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            
            recentHistory.forEach((msg: { role: string; content: string }) => {
                appendMessage(msg.content, msg.role as 'user' | 'assistant');
            });

            showHistoryRestoredNotification();
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    function clearChatMessages(): void {
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const welcomeMessage = chatMessages.querySelector('.assistant-message');
        chatMessages.innerHTML = '';
        
        if (welcomeMessage) {
            chatMessages.appendChild(welcomeMessage);
        } else {
            // –ï—Å–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
            const defaultMessage = document.createElement('div');
            defaultMessage.className = 'message assistant-message';
            defaultMessage.innerHTML = '<p>–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ù—É—Ä–±–æ–ª–∞—Ç—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –í—Å–µ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ <a href="/details" style="color: #007bff; text-decoration: underline;">—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å–∞</a>. –°–ø—Ä–∞—à–∏–≤–∞–π –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —É—Å–ª–æ–≤–∏—è—Ö - –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!</p>';
            chatMessages.appendChild(defaultMessage);
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    function showHistoryRestoredNotification(): void {
        const notification = document.createElement('div');
        notification.innerHTML = `
            <div style="
                background: #d4edda;
                border: 1px solid #c3e6cb;
                border-radius: 4px;
                padding: 8px 12px;
                margin: 10px;
                font-size: 12px;
                color: #155724;
            ">
                üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞. 
                <button onclick="this.parentElement.remove()" 
                style="background: none; border: none; color: #007bff; cursor: pointer; text-decoration: underline; margin-left: 5px;">
                –°–∫—Ä—ã—Ç—å</button>
            </div>
        `;
        
        chatMessages.parentNode?.insertBefore(notification, chatMessages);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    loadValidChatHistory();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
    chatInput.addEventListener('input', updateActivity);
    chatInput.addEventListener('focus', updateActivity);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    chatForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        updateActivity();
        
        const userQuestion = chatInput.value.trim();
        if (!userQuestion) return;

        // 1. –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        appendMessage(userQuestion, 'user');
        ChatSessionManager.saveMessageToHistory(userQuestion, 'user');
        
        chatInput.value = '';
        chatInput.disabled = true;

        // 2. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        const loadingIndicator = appendMessage('–î—É–º–∞—é...', 'assistant', true);

        try {
            // 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const userId = ChatSessionManager.getOrCreateUserId();
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    question: userQuestion, 
                    userId: userId 
                }),
            });

            if (!response.ok || !response.body) {
                throw new Error(`Server error: ${response.statusText}`);
            }
            
            // 4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let fullResponse = '';

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —ç–º–æ–¥–∑–∏ –∏ —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            stopEmojiAnimation(loadingIndicator);
            removeEmojiIndicator(loadingIndicator);

            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç "–î—É–º–∞—é..." –∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞
            const contentP = loadingIndicator.querySelector('p')!;
            contentP.textContent = '';

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;
                
                const chunk = decoder.decode(value, { stream: true });
                fullResponse += chunk;
                contentP.textContent = fullResponse;
                scrollToBottom();
            }

            scrollToBottom();
            ChatSessionManager.saveMessageToHistory(fullResponse, 'assistant');

        } catch (error) {
            console.error('Chat error:', error);
            const errorMessage = '–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            
            stopEmojiAnimation(loadingIndicator);
            removeEmojiIndicator(loadingIndicator);
            
            loadingIndicator.querySelector('p')!.textContent = errorMessage;
            ChatSessionManager.saveMessageToHistory(errorMessage, 'assistant');
            scrollToBottom();
        } finally {
            chatInput.disabled = false;
            
            if (!isMobileDevice()) {
                chatInput.focus();
            }
        }
    });

    smartFocusManagement();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ—á–∏—Å—Ç–∫–∏ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
    setInterval(() => {
        if (!ChatSessionManager.isSessionActive()) {
            // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –æ—á–∏—â–∞–µ–º —á–∞—Ç
            clearChatMessages();
        }
    }, 60 * 1000);

    showCleanupTimer();
}

function showCleanupTimer(): void {
    const timeUntilCleanup = ChatSessionManager.getTimeUntilCleanup();
    const minutesLeft = Math.ceil(timeUntilCleanup / (60 * 1000));
    
    if (minutesLeft < 10) {
        const timer = document.createElement('div');
        timer.id = 'chat-cleanup-timer';
        timer.innerHTML = `üïí –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –µ—â–µ ${minutesLeft} –º–∏–Ω`;
        timer.style.cssText = `
            position: fixed;
            bottom: 30px;
            right: 10px;
            z-index: 1000;
            font-size: 11px;
            color: #6c757d;
            background: #f8f9fa;
            padding: 3px 8px;
            border-radius: 3px;
            border: 1px solid #dee2e6;
        `;
        
        document.body.appendChild(timer);

        setInterval(() => {
            const newTimeLeft = ChatSessionManager.getTimeUntilCleanup();
            const newMinutesLeft = Math.ceil(newTimeLeft / (60 * 1000));
            
            if (newMinutesLeft <= 0) {
                timer.remove();
            } else {
                timer.textContent = `üïí –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –µ—â–µ ${newMinutesLeft} –º–∏–Ω`;
            }
        }, 60 * 1000);
    }
}

document.addEventListener('DOMContentLoaded', initializeChat);
